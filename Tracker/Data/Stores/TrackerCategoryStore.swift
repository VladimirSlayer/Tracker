import CoreData
import UIKit

final class TrackerCategoryStore: NSObject, NSFetchedResultsControllerDelegate {
    private let context: NSManagedObjectContext
    private(set) var fetchedResultsController: NSFetchedResultsController<TrackerCategoryCoreData>
    weak var delegate: TrackerCategoryStoreDelegate?
    
    
    init(context: NSManagedObjectContext) {
        self.context = context
        let request: NSFetchRequest<TrackerCategoryCoreData> = TrackerCategoryCoreData.fetchRequest()
        request.sortDescriptors = [NSSortDescriptor(key: "title", ascending: true)]

        self.fetchedResultsController = NSFetchedResultsController(
            fetchRequest: request,
            managedObjectContext: context,
            sectionNameKeyPath: nil,
            cacheName: nil
        )

        super.init()
        self.fetchedResultsController.delegate = self

        do {
            try fetchedResultsController.performFetch()
        } catch {
            print("‚ùå Failed to fetch categories: \(error)")
        }
    }

    var categories: [TrackerCategory] {
            print("üëâ TrackerCategoryStore: –ó–∞–ø—Ä–æ—à–µ–Ω–∞ computed property 'categories'.")
            let fetchedObjects = fetchedResultsController.fetchedObjects ?? []
            print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ fetchedObjects (—Å—ã—Ä—ã—Ö CoreData –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ FRC): \(fetchedObjects.count)")

            return fetchedObjects.compactMap { coreDataCategory in
                print("  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è CoreDataCategory: \(coreDataCategory.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")")
                let trackerSet = coreDataCategory.trackers as? Set<TrackerCoreData> ?? []
                print("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ TrackerCoreData –≤ –°–´–†–û–ô CoreData –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '\(coreDataCategory.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")' –ø–µ—Ä–µ–¥ –º–∞–ø–ø–∏–Ω–≥–æ–º –≤ Tracker: \(trackerSet.count)")

                let trackers = trackerSet.compactMap { coreDataTracker in
                    print("    –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Tracker –∏–∑ TrackerCoreData (id: \(coreDataTracker.id?.uuidString ?? "N/A"), name: \(coreDataTracker.name ?? "N/A"))...")
                    return Tracker(coreData: coreDataTracker)
                }
                print("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Tracker –≤ –ö–ê–¢–ï–ì–û–†–ò–ò '\(coreDataCategory.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")' –ø–æ—Å–ª–µ compactMap: \(trackers.count)")

                return TrackerCategory(title: coreDataCategory.title ?? "", trackers: trackers)
            }
    }
    
    func createCategory(title: String) throws {
        let category = TrackerCategoryCoreData(context: context)
        category.title = title
        try context.save()
    }
    
    func createTracker(_ tracker: Tracker, inCategoryTitled categoryTitle: String) throws {
        let categoryFetchRequest: NSFetchRequest<TrackerCategoryCoreData> = TrackerCategoryCoreData.fetchRequest()
        categoryFetchRequest.predicate = NSPredicate(format: "title == %@", categoryTitle)
        
        let existingCategories = try context.fetch(categoryFetchRequest)
        let category: TrackerCategoryCoreData
        
        if let existingCategory = existingCategories.first {
            category = existingCategory
        } else {
            let newCategory = TrackerCategoryCoreData(context: context)
            newCategory.title = categoryTitle
            category = newCategory
        }

        let newTrackerCoreData = TrackerCoreData(context: context)
        newTrackerCoreData.id = tracker.id
        newTrackerCoreData.name = tracker.name
        newTrackerCoreData.color = tracker.color
        newTrackerCoreData.emoji = tracker.emoji
        newTrackerCoreData.schedule = tracker.schedule.map(\.rawValue) as NSArray
        newTrackerCoreData.type = tracker.type.rawValue
        newTrackerCoreData.createdDate = tracker.createdDate
        
        category.addToTrackers(newTrackerCoreData)
        
        try context.save()
        
        do {
                try context.save()
                print("‚úÖ –¢—Ä–µ–∫–µ—Ä '\(tracker.name)' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '\(categoryTitle)'")

                print("--- –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π TrackerCoreData ---")
                print("ID: \(newTrackerCoreData.id?.uuidString ?? "N/A")")
                print("Name: \(newTrackerCoreData.name ?? "N/A")")

                if let savedColor = newTrackerCoreData.color {
                    print("Color (as stored): \(savedColor)")
                } else {
                    print("Color: N/A or nil")
                }


                if let savedSchedule = newTrackerCoreData.schedule {
                    print("Schedule (as stored): \(savedSchedule)")
                    if let scheduleData = savedSchedule as? Data {
                        if let decodedSchedule = try? JSONDecoder().decode([Weekday].self, from: scheduleData) {
                            print("Decoded Schedule (from stored Data): \(decodedSchedule.map { $0.rawValue })")
                        } else {
                            print("Failed to decode schedule from Data.")
                        }
                    } else if let scheduleArray = savedSchedule as? [String] {
                         print("Schedule (as stored array): \(scheduleArray)")
                    }
                } else {
                    print("Schedule: N/A or nil")
                }
            print("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–µ—Ä–æ–≤ –≤ CoreData-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '\(category.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")' —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: \(category.trackers?.count ?? 0)")
                print("-----------------------------------")


            } catch {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä (–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è): \(error)")
                throw error
            }
    }
    func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
            print("üîÑ NSFetchedResultsControllerDelegate: –î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å. –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–µ–ª–µ–≥–∞—Ç–∞.")
            delegate?.didUpdateContent()
        }
}
